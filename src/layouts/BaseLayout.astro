---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import SideBar from "../components/SideBar.astro";
import { ViewTransitions } from "astro:transitions";
import { SITE_TITLE, SITE_DESCRIPTION } from "../config";

const {
  image,
  title = SITE_TITLE,
  description = SITE_DESCRIPTION,
  includeSidebar = true,
  sideBarActiveItemID,
} = Astro.props;
---

<!DOCTYPE html>
<html lang="en" data-theme="dark">
  <head>
    <BaseHead title={title} description={description} image={image} />
    <ViewTransitions />
  </head>

  <body class="scrollbar-hide">
    <div class="bg-base-100 drawer lg:drawer-open">
      <input id="my-drawer" type="checkbox" class="drawer-toggle" />
      <div class="drawer-content bg-base-100 shadow-inner shadow-indigo-600/70">
        <Header title={SITE_TITLE} />
        <div class="md:flex md:justify-center">
          <main class="p-6 pt-10 lg:max-w-[900px] max-w-[100vw]">
            <slot />
          </main>
        </div>
        <Footer />
      </div>
      {includeSidebar && <SideBar sideBarActiveItemID={sideBarActiveItemID} />}
    </div>
    <script
      is:inline
      src="https://cdn.jsdelivr.net/npm/tsparticles-confetti@2.11.0/tsparticles.confetti.bundle.min.js"
    ></script>
    <script>
      let styleSheet = null;

      const SPARK_ELEMENT_WIDTH = 30;
      const DISTANCE = 40;

      const RANDOMNESS_ON = true;

      /**
       * A burst is a grouping of many sparks
       * A spark is some individual dom element generally used with other sparks to create interesting UI effects.
       **/

      /**
       * Util for creating sequences of css transform steps cleanly
       */
      function createTransformSteps() {
        if (Array.from(arguments).length === 0) {
          throw Exception(
            "arguments to createTransformSteps should never be empty!"
          );
        }

        const inputSteps = Array.from(arguments);
        const outputSteps = [inputSteps.shift()];
        inputSteps.forEach((step, i) => {
          outputSteps.push(`${outputSteps[i]} ${step}`);
        });

        return outputSteps;
      }

      /**
       * Creates a new keyframe rule available in css context with a specific spark rotation
       */
      const dynamicAnimation = (name, rotation) => {
        if (!styleSheet) {
          styleSheet = document.createElement("style");
          styleSheet.type = "text/css";
          document.head.appendChild(styleSheet);
        }

        /**
  Explaining the transform rules
  1. prepares spark
  2. shoots the spark out
  3. keeps the spark in place while scaling it down
*/

        const randomDist = RANDOMNESS_ON
          ? Math.floor((Math.random() - 0.5) * DISTANCE * 0.7)
          : 0;

        const [s1, s2, s3] = createTransformSteps(
          `translate(-50%, -50%) rotate(${rotation}deg) translate(10px, 0px)`,
          `translate(${DISTANCE + randomDist}px, 0px) scale(0.5, 0.5)`,
          `translate(${SPARK_ELEMENT_WIDTH / 2}px, 0) scale(0, 0)`
        );

        // todo some axis would be good here.
        styleSheet.sheet.insertRule(
          `@keyframes ${name} {
     0% {
       transform: ${s1};
     }
     70% {
       transform: ${s2};
     }
     100% {
       transform: ${s3};
     }
  }`,
          styleSheet.length
        );
      };

      document.body.addEventListener("click", (e) => {
        const center = { x: e.pageX, y: e.pageY };
        makeBurst(center);
      });

      const makeBurst = (center) => {
        for (let i = 0; i < 8; i++) {
          const randomSpace = RANDOMNESS_ON
            ? Math.floor(-17 + Math.random() * 34)
            : 0;
          makeSpark(center, 45 * i + randomSpace);
        }
      };

      /**
       * Creates a spark
       */
      const makeSpark = (center, rotation) => {
        const div = document.createElement("div");
        const aniName = `disappear_${rotation}`;
        dynamicAnimation(aniName, rotation);

        div.classList.add("spark");
        div.style.left = `${center.x}px`;
        div.style.top = `${center.y}px`;
        div.style.animation = `${aniName} 500ms ease-out both`;

        document.body.append(div);
      };
      function celebrate() {
        const duration = 15 * 1000,
          animationEnd = Date.now() + duration,
          defaults = { startVelocity: 30, spread: 360, ticks: 60, zIndex: 0 };

        function randomInRange(min, max) {
          return Math.random() * (max - min) + min;
        }

        const interval = setInterval(function () {
          const timeLeft = animationEnd - Date.now();

          if (timeLeft <= 0) {
            return clearInterval(interval);
          }

          const particleCount = 50 * (timeLeft / duration);

          // since particles fall down, start a bit higher than random
          confetti(
            Object.assign({}, defaults, {
              particleCount,
              origin: { x: randomInRange(0.1, 0.3), y: Math.random() - 0.2 },
            })
          );
          confetti(
            Object.assign({}, defaults, {
              particleCount,
              origin: { x: randomInRange(0.7, 0.9), y: Math.random() - 0.2 },
            })
          );
        }, 250);
      }
      document
        .getElementById("startButton")
        .addEventListener("click", function () {
          celebrate();
        });
    </script>
  </body>
</html>
